DELIMITER //

CREATE PROCEDURE registrar_recaudo (
    IN p_anfitrion_id BIGINT UNSIGNED,
    IN p_bus_id VARCHAR(255),
    IN p_conductor_id VARCHAR(255),
    IN p_ruta_id VARCHAR(255),
    IN p_horario VARCHAR(255),
    IN p_cant_reg INT,
    IN p_cant_pref INT,
    IN p_observaciones TEXT
)
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_talonario_id BIGINT;
    DECLARE v_ticket_inicio INT;
    DECLARE v_ticket_max INT;
    DECLARE v_usar INT;
    DECLARE v_total_usados INT DEFAULT 0;
    DECLARE v_rango_inicial_reg INT DEFAULT NULL;
    DECLARE v_rango_final_reg INT DEFAULT NULL;
    DECLARE v_rango_inicial_pref INT DEFAULT NULL;
    DECLARE v_rango_final_pref INT DEFAULT NULL;
    DECLARE v_monto_reg DECIMAL(10,2);
    DECLARE v_monto_pref DECIMAL(10,2);
    DECLARE v_total DECIMAL(10,2);

    -- Cursor para talonarios regulares activos del anfitri칩n
    DECLARE cur CURSOR FOR
        SELECT id, rango_inicial_regulares, rango_final_regulares
        FROM entrega_talonarios_anfitrion
        WHERE anfitrion_id = p_anfitrion_id AND estado_regular = 1
        ORDER BY id ASC;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Proceso para tickets regulares
    OPEN cur;

    lectura_loop: LOOP
        FETCH cur INTO v_talonario_id, v_ticket_inicio, v_ticket_max;
        IF done THEN
            LEAVE lectura_loop;
        END IF;

        -- Calcula cu치ntos tickets usar de este talonario
        SET v_usar = LEAST(p_cant_reg - v_total_usados, (v_ticket_max - v_ticket_inicio + 1));

        IF v_usar > 0 THEN
            IF v_rango_inicial_reg IS NULL THEN
                SET v_rango_inicial_reg = v_ticket_inicio;
            END IF;

            SET v_ticket_inicio = v_ticket_inicio + v_usar - 1;
            SET v_rango_final_reg = v_ticket_inicio;
            SET v_total_usados = v_total_usados + v_usar;

            -- Actualizar rango inicial de talonario
            UPDATE entrega_talonarios_anfitrion
            SET rango_inicial_regulares = v_ticket_inicio + 1,
                total_tickets_regulares = total_tickets_regulares - v_usar
            WHERE id = v_talonario_id
              AND estado_regular = 1
              AND anfitrion_id = p_anfitrion_id;

            -- Si se agota el talonario, cambiar estado a 2 (usado)
            IF v_ticket_inicio + 1 > v_ticket_max THEN
                UPDATE entrega_talonarios_anfitrion
                SET estado_regular = 2
                WHERE id = v_talonario_id;
            END IF;
        END IF;

        IF v_total_usados >= p_cant_reg THEN
            LEAVE lectura_loop;
        END IF;
    END LOOP;

    CLOSE cur;

    -- Preferenciales: restar directamente total_tickets_preferenciales del anfitri칩n
    -- Actualizar los rangos de preferenciales igual (ajusta si manejas rangos)
    SET v_rango_inicial_pref = 1; -- ejemplo
    SET v_rango_final_pref = v_rango_inicial_pref + p_cant_pref - 1;

    UPDATE entrega_talonarios_anfitrion
    SET total_tickets_preferenciales = total_tickets_preferenciales - p_cant_pref
    WHERE anfitrion_id = p_anfitrion_id
      AND estado_preferencial = 1;

    -- C치lculos de montos
    SET v_monto_reg = p_cant_reg * 1.50; -- precio fijo regular
    SET v_monto_pref = p_cant_pref * 1.00; -- precio fijo preferencial
    SET v_total = v_monto_reg + v_monto_pref;

    -- Insertar en formulario_recaudo
    INSERT INTO formulario_recaudo (
        anfitrion_id, bus_id, conductor_id, ruta_id, horario,
        cantidad_ventas_regulares, rango_inicial_regulares, rango_final_regulares, monto_recaudado_regular,
        cantidad_ventas_preferenciales, rango_inicial_preferencial, rango_final_preferencial, monto_recaudado_preferencial,
        total_recaudo_regular_preferencial, fecha_recaudo, observaciones, estado, created_at
    ) VALUES (
        p_anfitrion_id, p_bus_id, p_conductor_id, p_ruta_id, p_horario,
        p_cant_reg, v_rango_inicial_reg, v_rango_final_reg, v_monto_reg,
        p_cant_pref, v_rango_inicial_pref, v_rango_final_pref, v_monto_pref,
        v_total, NOW(), p_observaciones, 1, NOW()
    );
END;
//

DELIMITER ;
